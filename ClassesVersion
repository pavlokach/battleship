class Ship:
    def __init__(self, length):
        self.__length = length
        self.__hit = [False] * length
        self.bow = (0, 0)
        self.horizontal = False

    def __len__(self):
        return self.__length

    def shoot_at(self, cell):
        if self.bow == (0, 0):
            return 'miss'
        elif self.horizontal is True:
            for l in range(self.__length):
                if cell == (self.bow[0], self.bow[1] + l):
                    self.__hit[l] = True
                    break
        else:
            for l in range(self.__length):
                if cell == (self.bow[0] + l, self.bow[1]):
                    self.__hit[l] = True
                    break
        if self.__hit == [True] * self.__length:
            return 'kill'
        else:
            return 'hit'


class Player:
    def __init__(self, name):
        self.name = name

    @staticmethod
    def read_position(self):
        import string
        alphabet = string.ascii_letters
        coords = input('Choose where to shoot(in B4/b4 format): ')
        while (type(coords[1:]) != int) or (coords[0] not in alphabet):
            coords = input('Please enter in B4 format: ')
        coords = (int(coords[1:] - 1), alphabet.index(coords[0].lower()))
        return coords


class Field:

    def __init__(self):
        self.__ships = Field.__generate_field()
        self.__hit = set()

    @staticmethod
    def __generate_field():
        '''
        Not my algorithm
        '''
        ships_len = [4, 3, 2, 1]
        for ship in ships_len:
            from random import randint

            def add_cells(cells):
                for cell in cells:
                    for i in range(-1, 2):
                        for j in range(-1, 2):
                            yield (cell[0] + i, cell[1] + j)

            for amount in range(5 - ship):
                while True:
                    cells = []
                    random1 = randint(0, 9)
                    random2 = randint(0, 9)
                    if randint(1, 2) == 1:
                        hor = False
                        for i in range(ship):
                            cells.append((i + random1, random2))
                        if cells[len(cells) - 1][0] > 9:
                            continue
                    else:
                        hor = True
                        for i in range(ship):
                            cells.append((random1, random2 + i))
                        if cells[len(cells) - 1][1] > 9:
                            continue
                    for cell in add_cells(cells):
                        try:
                            if len(ships_len[cell[0]][cell[1]]) <= 0:
                                continue
                        except:
                            break
                    break
                sh = Ship(ship)
                sh.bow = (random1, random2)
                sh.horizontal = hor
                for cell in cells:
                    ships_len[cell[0]][cell[1]] = sh
        return ships_len

    def shoot_at(self, cell):
        self.__hit.add(cell)
        return self.__ships[cell[0]][cell[1]].shoot_at(cell)

    def field_without_ships(self):
        field = '  A B C D E F G H I J'
        for i in range(10):
            field += '\n' + str(i + 1) + ' ' if i != 9 else '\n' + str(i + 1)
            for j in range(10):
                if (i, j) in self.__hit and len(self.__ships[i][j]) > 0:
                    field += 'X'
                elif (i, j) in self.__hit:
                    field += '0'
                else:
                    field += ' '
                field += ' '
        return field

    def field_with_ships(self):
        field = '  A B C D E F G H I J'
        for i in range(10):
            field += '\n' + str(i + 1) + ' ' if i != 9 else '\n' + str(i + 1)
            for j in range(10):
                if (i, j) in self.__hit and len(self.__ships[i][j]) > 0:
                    field += 'X'
                elif len(self.__ships[i][j]) > 0:
                    field += '*'
                elif (i, j) in self.__hit:
                    field += '0'
                else:
                    field += ' '
                field += ' '
        return field

    class Game:

        def __init__(self):
            name1 = input('Enter first players name: ')
            name2 = input('Enter second players name: ')
            self.__field = [Field(), Field()]
            self.__players = [Player(name1), Player(name2)]
            self.__destroyed = [0, 0]

        def field_with_ships(self, player):
            return self.__field[player].field_with_ships()

        def field_without_ships(self, player):
            return self.__field[player].field_without_ships()

        def read_position(self, player):
            return self.__players[player].read_position()
